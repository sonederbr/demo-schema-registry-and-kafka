version: '2'
services:

  zookeeper:
    image: confluentinc/cp-zookeeper:6.0.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - docker-kafka-nifi-schemaregistry

  kafka:
    image: confluentinc/cp-kafka:6.0.0
    container_name: kafka
    depends_on:
      - zookeeper
    networks:
      - docker-kafka-nifi-schemaregistry
    hostname: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Setup 2 listeners
      # Port 29092 - available for within docker environment - other services will connect here
      # Port 9092 - published outside to be used by clients
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:6.0.0
    container_name: schema-registry
    depends_on:
      - kafka
    networks:
      - docker-kafka-nifi-schemaregistry
    hostname: schema-registry
    ports:
      - 8085:8085
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8085
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'

  rest-proxy:
    image: confluentinc/cp-kafka-rest:6.0.0
    container_name: rest-proxy
    depends_on:
      - kafka
      - schema-registry
    networks:
      - docker-kafka-nifi-schemaregistry
    hostname: rest-proxy
    ports:
      - 8082:8082
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: schema-registry:8085
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_REST_SECURITY_PROTOCOL: "PLAINTEXT"
      KAFKA_REST_CLIENT_SECURITY_PROTOCOL: "PLAINTEXT"

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.0.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
      - rest-proxy
    networks:
      - docker-kafka-nifi-schemaregistry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
      #CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://localhost:8085"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8085"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: kafka-ui
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    networks:
      - docker-kafka-nifi-schemaregistry
    ports:
      - "8084:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:29092' 
      KAFKA_CLUSTERS_0_ZOOKEEPER: 'zookeeper:2181' 
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8085
      #KAFKA_CLUSTERS_0_SCHEMAREGISTRYAUTH_USERNAME: schemaregistry-dev 
      #KAFKA_CLUSTERS_0_SCHEMAREGISTRYAUTH_PASSWORD: sr_dev
# Use dedicated network that will be discarded with docker-compose down
networks:
  docker-kafka-nifi-schemaregistry:
    driver: bridge